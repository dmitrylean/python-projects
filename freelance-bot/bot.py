import asyncio
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# üìã –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class OrderForm(StatesGroup):
    name = State()
    description = State()
    contact = State()

# üèÅ –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä-–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu
    )

# üì§ –ó–∞—è–≤–∫–∞
@dp.message(Command("order"))
async def start_order(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(OrderForm.name)

@dp.message(OrderForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:")
    await state.set_state(OrderForm.description)

@dp.message(OrderForm.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram username):")
    await state.set_state(OrderForm.contact)

@dp.message(OrderForm.contact)
async def process_contact(message: Message, state: FSMContext):
    data = await state.update_data(contact=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ")

    text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìÑ –ó–∞–¥–∞—á–∞: {data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    await state.clear()

# üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
@dp.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    await message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: https://example.com")

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda m: m.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def handle_order_button(message: Message, state: FSMContext):
    await start_order(message, state)

@dp.message(lambda m: m.text == "üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
async def handle_portfolio_button(message: Message):
    await cmd_portfolio(message)

# ‚ÑπÔ∏è FAQ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@dp.message(lambda m: "—Ü–µ–Ω—ã" in m.text.lower())
async def auto_faq(message: Message):
    await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏. –ù–∞–ø–∏—à–∏ /order —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å ‚úçÔ∏è")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
